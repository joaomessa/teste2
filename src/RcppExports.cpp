// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _teste2_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// signC
int signC(int x, int y);
RcppExport SEXP _teste2_signC(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(signC(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sumC
double sumC(NumericVector x);
RcppExport SEXP _teste2_sumC(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sumC(x));
    return rcpp_result_gen;
END_RCPP
}
// add2
int add2(int j, int k);
RcppExport SEXP _teste2_add2(SEXP jSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(add2(j, k));
    return rcpp_result_gen;
END_RCPP
}
// invvech_eigen
Eigen::MatrixXd invvech_eigen(const Eigen::VectorXd& x);
RcppExport SEXP _teste2_invvech_eigen(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(invvech_eigen(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _teste2_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _teste2_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// functest1
Eigen::VectorXd functest1(const Eigen::MatrixXd& x);
RcppExport SEXP _teste2_functest1(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(functest1(x));
    return rcpp_result_gen;
END_RCPP
}
// functest2
Eigen::VectorXd functest2(const Eigen::MatrixXd& x, const Eigen::VectorXd& i);
RcppExport SEXP _teste2_functest2(SEXP xSEXP, SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(functest2(x, i));
    return rcpp_result_gen;
END_RCPP
}
// autos
Rcpp::List autos(const Eigen::MatrixXd& x);
RcppExport SEXP _teste2_autos(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(autos(x));
    return rcpp_result_gen;
END_RCPP
}
// pw
Rcpp::List pw(int nvar, int itera, int ncluster, const Eigen::MatrixXd& info_j, const Eigen::MatrixXd& x, const Eigen::VectorXd& y, const Eigen::MatrixXd& z, const Eigen::VectorXd& wi_j_star, const Eigen::VectorXd& wj_star, const Eigen::VectorXd& teta, int s, const Eigen::VectorXd& teta0);
RcppExport SEXP _teste2_pw(SEXP nvarSEXP, SEXP iteraSEXP, SEXP nclusterSEXP, SEXP info_jSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP wi_j_starSEXP, SEXP wj_starSEXP, SEXP tetaSEXP, SEXP sSEXP, SEXP teta0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< int >::type itera(iteraSEXP);
    Rcpp::traits::input_parameter< int >::type ncluster(nclusterSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type info_j(info_jSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wi_j_star(wi_j_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type wj_star(wj_starSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type teta(tetaSEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type teta0(teta0SEXP);
    rcpp_result_gen = Rcpp::wrap(pw(nvar, itera, ncluster, info_j, x, y, z, wi_j_star, wj_star, teta, s, teta0));
    return rcpp_result_gen;
END_RCPP
}
// teste_sparse
Eigen::SparseMatrix<double> teste_sparse();
RcppExport SEXP _teste2_teste_sparse() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(teste_sparse());
    return rcpp_result_gen;
END_RCPP
}
// vector_eigen
Eigen::VectorXd vector_eigen(const Eigen::SparseMatrix<double>& A, int a);
RcppExport SEXP _teste2_vector_eigen(SEXP ASEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_eigen(A, a));
    return rcpp_result_gen;
END_RCPP
}
// diagonalizar
Eigen::SparseMatrix<double> diagonalizar(const Eigen::SparseMatrix<double>& AJ_TETA, const Eigen::SparseMatrix<double>& SOL_TETA, const Eigen::SparseMatrix<double>& H_kj, const Eigen::VectorXd& delta);
RcppExport SEXP _teste2_diagonalizar(SEXP AJ_TETASEXP, SEXP SOL_TETASEXP, SEXP H_kjSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type AJ_TETA(AJ_TETASEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type SOL_TETA(SOL_TETASEXP);
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type H_kj(H_kjSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(diagonalizar(AJ_TETA, SOL_TETA, H_kj, delta));
    return rcpp_result_gen;
END_RCPP
}
// diag_eigen
Eigen::VectorXd diag_eigen(const Eigen::SparseMatrix<double>& A);
RcppExport SEXP _teste2_diag_eigen(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(diag_eigen(A));
    return rcpp_result_gen;
END_RCPP
}
// vecto_eigen
Eigen::VectorXd vecto_eigen(const Eigen::SparseMatrix<double>& A, int a);
RcppExport SEXP _teste2_vecto_eigen(SEXP ASEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::SparseMatrix<double>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(vecto_eigen(A, a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_teste2_rcpp_hello_world", (DL_FUNC) &_teste2_rcpp_hello_world, 0},
    {"_teste2_signC", (DL_FUNC) &_teste2_signC, 2},
    {"_teste2_sumC", (DL_FUNC) &_teste2_sumC, 1},
    {"_teste2_add2", (DL_FUNC) &_teste2_add2, 2},
    {"_teste2_invvech_eigen", (DL_FUNC) &_teste2_invvech_eigen, 1},
    {"_teste2_rcppeigen_hello_world", (DL_FUNC) &_teste2_rcppeigen_hello_world, 0},
    {"_teste2_rcppeigen_bothproducts", (DL_FUNC) &_teste2_rcppeigen_bothproducts, 1},
    {"_teste2_functest1", (DL_FUNC) &_teste2_functest1, 1},
    {"_teste2_functest2", (DL_FUNC) &_teste2_functest2, 2},
    {"_teste2_autos", (DL_FUNC) &_teste2_autos, 1},
    {"_teste2_pw", (DL_FUNC) &_teste2_pw, 12},
    {"_teste2_teste_sparse", (DL_FUNC) &_teste2_teste_sparse, 0},
    {"_teste2_vector_eigen", (DL_FUNC) &_teste2_vector_eigen, 2},
    {"_teste2_diagonalizar", (DL_FUNC) &_teste2_diagonalizar, 4},
    {"_teste2_diag_eigen", (DL_FUNC) &_teste2_diag_eigen, 1},
    {"_teste2_vecto_eigen", (DL_FUNC) &_teste2_vecto_eigen, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_teste2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
